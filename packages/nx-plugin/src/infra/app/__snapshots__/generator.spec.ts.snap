// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`infra generator > should add required dependencies to package.json > dependencies 1`] = `
{
  "@cdklabs/cdk-validator-cfnguard": "^0.0.60",
  "aws-cdk": "^2.1006.0",
  "aws-cdk-lib": "^2.200.0",
  "constructs": "^10.4.2",
  "esbuild": "^0.25.1",
  "source-map-support": "^0.5.21",
}
`;

exports[`infra generator > should add required dependencies to package.json > dev-dependencies 1`] = `
{
  "@eslint/js": "^9.8.0",
  "@nx/eslint": "21.0.3",
  "@nx/eslint-plugin": "21.0.3",
  "@nx/js": "21.0.3",
  "@nx/vite": "21.0.3",
  "@nx/web": "21.0.3",
  "@swc-node/register": "~1.9.1",
  "@swc/core": "~1.5.7",
  "@swc/helpers": "~0.5.11",
  "@types/node": "^22.13.13",
  "@vitest/coverage-v8": "^3.0.5",
  "@vitest/ui": "^3.0.0",
  "eslint": "^9.8.0",
  "eslint-config-prettier": "^10.0.0",
  "eslint-plugin-prettier": "^5.2.5",
  "jiti": "2.4.2",
  "jsdom": "~22.1.0",
  "jsonc-eslint-parser": "^2.4.0",
  "prettier": "^3.5.3",
  "tsx": "4.20.1",
  "typescript": "~5.7.2",
  "typescript-eslint": "^8.19.0",
  "vite": "^6.0.0",
  "vitest": "^3.0.0",
}
`;

exports[`infra generator > should add required dependencies to package.json > package-json 1`] = `
{
  "dependencies": {
    "@cdklabs/cdk-validator-cfnguard": "^0.0.60",
    "aws-cdk": "^2.1006.0",
    "aws-cdk-lib": "^2.200.0",
    "constructs": "^10.4.2",
    "esbuild": "^0.25.1",
    "source-map-support": "^0.5.21",
  },
  "devDependencies": {
    "@eslint/js": "^9.8.0",
    "@nx/eslint": "21.0.3",
    "@nx/eslint-plugin": "21.0.3",
    "@nx/js": "21.0.3",
    "@nx/vite": "21.0.3",
    "@nx/web": "21.0.3",
    "@swc-node/register": "~1.9.1",
    "@swc/core": "~1.5.7",
    "@swc/helpers": "~0.5.11",
    "@types/node": "^22.13.13",
    "@vitest/coverage-v8": "^3.0.5",
    "@vitest/ui": "^3.0.0",
    "eslint": "^9.8.0",
    "eslint-config-prettier": "^10.0.0",
    "eslint-plugin-prettier": "^5.2.5",
    "jiti": "2.4.2",
    "jsdom": "~22.1.0",
    "jsonc-eslint-parser": "^2.4.0",
    "prettier": "^3.5.3",
    "tsx": "4.20.1",
    "typescript": "~5.7.2",
    "typescript-eslint": "^8.19.0",
    "vite": "^6.0.0",
    "vitest": "^3.0.0",
  },
  "name": "@proj/source",
  "type": "module",
}
`;

exports[`infra generator > should configure project.json with correct targets > build-target 1`] = `
{
  "dependsOn": [
    "lint",
    "compile",
    "test",
    "synth",
  ],
}
`;

exports[`infra generator > should configure project.json with correct targets > deploy-target 1`] = `
{
  "executor": "nx:run-commands",
  "options": {
    "command": "cdk deploy --require-approval=never",
    "cwd": "packages/test",
  },
}
`;

exports[`infra generator > should configure project.json with correct targets > destroy-target 1`] = `
{
  "executor": "nx:run-commands",
  "options": {
    "command": "cdk destroy --require-approval=never",
    "cwd": "packages/test",
  },
}
`;

exports[`infra generator > should configure project.json with correct targets > project-configuration 1`] = `
{
  "$schema": "../../node_modules/nx/schemas/project-schema.json",
  "metadata": {
    "generator": "ts#infra",
  },
  "name": "@proj/test",
  "projectType": "application",
  "root": "packages/test",
  "sourceRoot": "packages/test/src",
  "tags": [],
  "targets": {
    "bootstrap": {
      "executor": "nx:run-commands",
      "options": {
        "command": "cdk bootstrap",
        "cwd": "packages/test",
      },
    },
    "build": {
      "dependsOn": [
        "lint",
        "compile",
        "test",
        "synth",
      ],
    },
    "cdk": {
      "executor": "nx:run-commands",
      "options": {
        "command": "cdk",
        "cwd": "packages/test",
      },
    },
    "compile": {
      "executor": "nx:run-commands",
      "options": {
        "command": "tsc --build tsconfig.lib.json",
        "cwd": "{projectRoot}",
      },
      "outputs": [
        "{workspaceRoot}/dist/packages/test/tsc",
      ],
    },
    "deploy": {
      "executor": "nx:run-commands",
      "options": {
        "command": "cdk deploy --require-approval=never",
        "cwd": "packages/test",
      },
    },
    "deploy-ci": {
      "executor": "nx:run-commands",
      "options": {
        "command": "cdk deploy --require-approval=never --app ../../dist/packages/test/cdk.out",
        "cwd": "packages/test",
      },
    },
    "destroy": {
      "executor": "nx:run-commands",
      "options": {
        "command": "cdk destroy --require-approval=never",
        "cwd": "packages/test",
      },
    },
    "destroy-ci": {
      "executor": "nx:run-commands",
      "options": {
        "command": "cdk destroy --require-approval=never --app ../../dist/packages/test/cdk.out",
        "cwd": "packages/test",
      },
    },
    "synth": {
      "cache": true,
      "dependsOn": [
        "^build",
        "compile",
      ],
      "executor": "nx:run-commands",
      "inputs": [
        "default",
      ],
      "options": {
        "command": "cdk synth",
        "cwd": "packages/test",
      },
      "outputs": [
        "{workspaceRoot}/dist/packages/test/cdk.out",
      ],
    },
    "test": {
      "executor": "@nx/vite:test",
      "options": {
        "reportsDirectory": "../../coverage/packages/test",
      },
      "outputs": [
        "{options.reportsDirectory}",
      ],
    },
  },
}
`;

exports[`infra generator > should generate consistent file content across runs > consistent-files 1`] = `
{
  "cdk.json": "{
  "app": "tsx src/main.ts",
  "output": "../../dist/packages/test/cdk.out",
  "watch": {
    "include": ["**"],
    "exclude": [
      "README.md",
      "cdk*.json",
      "**/*.d.ts",
      "**/*.js",
      "tsconfig.json",
      "package*.json",
      "yarn.lock",
      "node_modules",
      "test"
    ]
  },
  "context": {
    "@aws-cdk/aws-lambda:recognizeLayerVersion": true,
    "@aws-cdk/core:checkSecretUsage": true,
    "@aws-cdk/core:target-partitions": ["aws", "aws-cn"],
    "@aws-cdk-containers/ecs-service-extensions:enableDefaultLogDriver": true,
    "@aws-cdk/aws-ec2:uniqueImdsv2TemplateName": true,
    "@aws-cdk/aws-ecs:arnFormatIncludesClusterName": true,
    "@aws-cdk/aws-iam:minimizePolicies": true,
    "@aws-cdk/core:validateSnapshotRemovalPolicy": true,
    "@aws-cdk/aws-codepipeline:crossAccountKeyAliasStackSafeResourceName": true,
    "@aws-cdk/aws-s3:createDefaultLoggingPolicy": true,
    "@aws-cdk/aws-sns-subscriptions:restrictSqsDescryption": true,
    "@aws-cdk/aws-apigateway:disableCloudWatchRole": true,
    "@aws-cdk/core:enablePartitionLiterals": true,
    "@aws-cdk/aws-events:eventsTargetQueueSameAccount": true,
    "@aws-cdk/aws-ecs:disableExplicitDeploymentControllerForCircuitBreaker": true,
    "@aws-cdk/aws-iam:importedRoleStackSafeDefaultPolicyName": true,
    "@aws-cdk/aws-s3:serverAccessLogsUseBucketPolicy": true,
    "@aws-cdk/aws-route53-patters:useCertificate": true,
    "@aws-cdk/customresources:installLatestAwsSdkDefault": false,
    "@aws-cdk/aws-rds:databaseProxyUniqueResourceName": true,
    "@aws-cdk/aws-codedeploy:removeAlarmsFromDeploymentGroup": true,
    "@aws-cdk/aws-apigateway:authorizerChangeDeploymentLogicalId": true,
    "@aws-cdk/aws-ec2:launchTemplateDefaultUserData": true,
    "@aws-cdk/aws-secretsmanager:useAttachedSecretResourcePolicyForSecretTargetAttachments": true,
    "@aws-cdk/aws-redshift:columnId": true,
    "@aws-cdk/aws-stepfunctions-tasks:enableEmrServicePolicyV2": true,
    "@aws-cdk/aws-ec2:restrictDefaultSecurityGroup": true,
    "@aws-cdk/aws-apigateway:requestValidatorUniqueId": true,
    "@aws-cdk/aws-kms:aliasNameRef": true,
    "@aws-cdk/aws-autoscaling:generateLaunchTemplateInsteadOfLaunchConfig": true,
    "@aws-cdk/core:includePrefixInUniqueNameGeneration": true,
    "@aws-cdk/aws-efs:denyAnonymousAccess": true,
    "@aws-cdk/aws-opensearchservice:enableOpensearchMultiAzWithStandby": true,
    "@aws-cdk/aws-lambda-nodejs:useLatestRuntimeVersion": true,
    "@aws-cdk/aws-efs:mountTargetOrderInsensitiveLogicalId": true,
    "@aws-cdk/aws-rds:auroraClusterChangeScopeOfInstanceParameterGroupWithEachParameters": true,
    "@aws-cdk/aws-appsync:useArnForSourceApiAssociationIdentifier": true,
    "@aws-cdk/aws-rds:preventRenderingDeprecatedCredentials": true,
    "@aws-cdk/aws-codepipeline-actions:useNewDefaultBranchForCodeCommitSource": true,
    "@aws-cdk/aws-cloudwatch-actions:changeLambdaPermissionLogicalIdForLambdaAction": true,
    "@aws-cdk/aws-codepipeline:crossAccountKeysDefaultValueToFalse": true,
    "@aws-cdk/aws-codepipeline:defaultPipelineTypeToV2": true,
    "@aws-cdk/aws-kms:reduceCrossAccountRegionPolicyScope": true,
    "@aws-cdk/aws-eks:nodegroupNameAttribute": true,
    "@aws-cdk/aws-ec2:ebsDefaultGp3Volume": true,
    "@aws-cdk/aws-ecs:removeDefaultDeploymentAlarm": true,
    "@aws-cdk/custom-resources:logApiResponseDataPropertyTrueDefault": false
  }
}
",
  "src/main.ts": "import { ApplicationStack } from './stacks/application-stack.js';
import { App, CfnGuardValidator, RuleSet } from ':proj/common-constructs';

const app = new App({
  policyValidationBeta1: [new CfnGuardValidator(RuleSet.AWS_PROTOTYPING)],
});

// Use this to deploy your own sandbox environment (assumes your CLI credentials)
new ApplicationStack(app, 'proj-infra-sandbox', {
  env: {
    account: process.env.CDK_DEFAULT_ACCOUNT,
    region: process.env.CDK_DEFAULT_REGION,
  },
  crossRegionReferences: true,
});

app.synth();
",
  "src/stacks/application-stack.ts": "import * as cdk from 'aws-cdk-lib';
import { Construct } from 'constructs';

export class ApplicationStack extends cdk.Stack {
  constructor(scope: Construct, id: string, props?: cdk.StackProps) {
    super(scope, id, props);

    // The code that defines your stack goes here
  }
}
",
}
`;

exports[`infra generator > should generate files with correct content > application-stack-ts 1`] = `
"import * as cdk from 'aws-cdk-lib';
import { Construct } from 'constructs';

export class ApplicationStack extends cdk.Stack {
  constructor(scope: Construct, id: string, props?: cdk.StackProps) {
    super(scope, id, props);

    // The code that defines your stack goes here
  }
}
"
`;

exports[`infra generator > should generate files with correct content > cdk-json 1`] = `
"{
  "app": "tsx src/main.ts",
  "output": "../../dist/packages/test/cdk.out",
  "watch": {
    "include": ["**"],
    "exclude": [
      "README.md",
      "cdk*.json",
      "**/*.d.ts",
      "**/*.js",
      "tsconfig.json",
      "package*.json",
      "yarn.lock",
      "node_modules",
      "test"
    ]
  },
  "context": {
    "@aws-cdk/aws-lambda:recognizeLayerVersion": true,
    "@aws-cdk/core:checkSecretUsage": true,
    "@aws-cdk/core:target-partitions": ["aws", "aws-cn"],
    "@aws-cdk-containers/ecs-service-extensions:enableDefaultLogDriver": true,
    "@aws-cdk/aws-ec2:uniqueImdsv2TemplateName": true,
    "@aws-cdk/aws-ecs:arnFormatIncludesClusterName": true,
    "@aws-cdk/aws-iam:minimizePolicies": true,
    "@aws-cdk/core:validateSnapshotRemovalPolicy": true,
    "@aws-cdk/aws-codepipeline:crossAccountKeyAliasStackSafeResourceName": true,
    "@aws-cdk/aws-s3:createDefaultLoggingPolicy": true,
    "@aws-cdk/aws-sns-subscriptions:restrictSqsDescryption": true,
    "@aws-cdk/aws-apigateway:disableCloudWatchRole": true,
    "@aws-cdk/core:enablePartitionLiterals": true,
    "@aws-cdk/aws-events:eventsTargetQueueSameAccount": true,
    "@aws-cdk/aws-ecs:disableExplicitDeploymentControllerForCircuitBreaker": true,
    "@aws-cdk/aws-iam:importedRoleStackSafeDefaultPolicyName": true,
    "@aws-cdk/aws-s3:serverAccessLogsUseBucketPolicy": true,
    "@aws-cdk/aws-route53-patters:useCertificate": true,
    "@aws-cdk/customresources:installLatestAwsSdkDefault": false,
    "@aws-cdk/aws-rds:databaseProxyUniqueResourceName": true,
    "@aws-cdk/aws-codedeploy:removeAlarmsFromDeploymentGroup": true,
    "@aws-cdk/aws-apigateway:authorizerChangeDeploymentLogicalId": true,
    "@aws-cdk/aws-ec2:launchTemplateDefaultUserData": true,
    "@aws-cdk/aws-secretsmanager:useAttachedSecretResourcePolicyForSecretTargetAttachments": true,
    "@aws-cdk/aws-redshift:columnId": true,
    "@aws-cdk/aws-stepfunctions-tasks:enableEmrServicePolicyV2": true,
    "@aws-cdk/aws-ec2:restrictDefaultSecurityGroup": true,
    "@aws-cdk/aws-apigateway:requestValidatorUniqueId": true,
    "@aws-cdk/aws-kms:aliasNameRef": true,
    "@aws-cdk/aws-autoscaling:generateLaunchTemplateInsteadOfLaunchConfig": true,
    "@aws-cdk/core:includePrefixInUniqueNameGeneration": true,
    "@aws-cdk/aws-efs:denyAnonymousAccess": true,
    "@aws-cdk/aws-opensearchservice:enableOpensearchMultiAzWithStandby": true,
    "@aws-cdk/aws-lambda-nodejs:useLatestRuntimeVersion": true,
    "@aws-cdk/aws-efs:mountTargetOrderInsensitiveLogicalId": true,
    "@aws-cdk/aws-rds:auroraClusterChangeScopeOfInstanceParameterGroupWithEachParameters": true,
    "@aws-cdk/aws-appsync:useArnForSourceApiAssociationIdentifier": true,
    "@aws-cdk/aws-rds:preventRenderingDeprecatedCredentials": true,
    "@aws-cdk/aws-codepipeline-actions:useNewDefaultBranchForCodeCommitSource": true,
    "@aws-cdk/aws-cloudwatch-actions:changeLambdaPermissionLogicalIdForLambdaAction": true,
    "@aws-cdk/aws-codepipeline:crossAccountKeysDefaultValueToFalse": true,
    "@aws-cdk/aws-codepipeline:defaultPipelineTypeToV2": true,
    "@aws-cdk/aws-kms:reduceCrossAccountRegionPolicyScope": true,
    "@aws-cdk/aws-eks:nodegroupNameAttribute": true,
    "@aws-cdk/aws-ec2:ebsDefaultGp3Volume": true,
    "@aws-cdk/aws-ecs:removeDefaultDeploymentAlarm": true,
    "@aws-cdk/custom-resources:logApiResponseDataPropertyTrueDefault": false
  }
}
"
`;

exports[`infra generator > should generate files with correct content > main-ts 1`] = `
"import { ApplicationStack } from './stacks/application-stack.js';
import { App, CfnGuardValidator, RuleSet } from ':proj/common-constructs';

const app = new App({
  policyValidationBeta1: [new CfnGuardValidator(RuleSet.AWS_PROTOTYPING)],
});

// Use this to deploy your own sandbox environment (assumes your CLI credentials)
new ApplicationStack(app, 'proj-infra-sandbox', {
  env: {
    account: process.env.CDK_DEFAULT_ACCOUNT,
    region: process.env.CDK_DEFAULT_REGION,
  },
  crossRegionReferences: true,
});

app.synth();
"
`;

exports[`infra generator > should generate files with correct content > project-structure 1`] = `
{
  "cdk.json": "{
  "app": "tsx src/main.ts",
  "output": "../../dist/packages/test/cdk.out",
  "watch": {
    "include": ["**"],
    "exclude": [
      "README.md",
      "cdk*.json",
      "**/*.d.ts",
      "**/*.js",
      "tsconfig.json",
      "package*.json",
      "yarn.lock",
      "node_modules",
      "test"
    ]
  },
  "context": {
    "@aws-cdk/aws-lambda:recognizeLayerVersion": true,
    "@aws-cdk/core:checkSecretUsage": true,
    "@aws-cdk/core:target-partitions": ["aws", "aws-cn"],
    "@aws-cdk-containers/ecs-service-extensions:enableDefaultLogDriver": true,
    "@aws-cdk/aws-ec2:uniqueImdsv2TemplateName": true,
    "@aws-cdk/aws-ecs:arnFormatIncludesClusterName": true,
    "@aws-cdk/aws-iam:minimizePolicies": true,
    "@aws-cdk/core:validateSnapshotRemovalPolicy": true,
    "@aws-cdk/aws-codepipeline:crossAccountKeyAliasStackSafeResourceName": true,
    "@aws-cdk/aws-s3:createDefaultLoggingPolicy": true,
    "@aws-cdk/aws-sns-subscriptions:restrictSqsDescryption": true,
    "@aws-cdk/aws-apigateway:disableCloudWatchRole": true,
    "@aws-cdk/core:enablePartitionLiterals": true,
    "@aws-cdk/aws-events:eventsTargetQueueSameAccount": true,
    "@aws-cdk/aws-ecs:disableExplicitDeploymentControllerForCircuitBreaker": true,
    "@aws-cdk/aws-iam:importedRoleStackSafeDefaultPolicyName": true,
    "@aws-cdk/aws-s3:serverAccessLogsUseBucketPolicy": true,
    "@aws-cdk/aws-route53-patters:useCertificate": true,
    "@aws-cdk/customresources:installLatestAwsSdkDefault": false,
    "@aws-cdk/aws-rds:databaseProxyUniqueResourceName": true,
    "@aws-cdk/aws-codedeploy:removeAlarmsFromDeploymentGroup": true,
    "@aws-cdk/aws-apigateway:authorizerChangeDeploymentLogicalId": true,
    "@aws-cdk/aws-ec2:launchTemplateDefaultUserData": true,
    "@aws-cdk/aws-secretsmanager:useAttachedSecretResourcePolicyForSecretTargetAttachments": true,
    "@aws-cdk/aws-redshift:columnId": true,
    "@aws-cdk/aws-stepfunctions-tasks:enableEmrServicePolicyV2": true,
    "@aws-cdk/aws-ec2:restrictDefaultSecurityGroup": true,
    "@aws-cdk/aws-apigateway:requestValidatorUniqueId": true,
    "@aws-cdk/aws-kms:aliasNameRef": true,
    "@aws-cdk/aws-autoscaling:generateLaunchTemplateInsteadOfLaunchConfig": true,
    "@aws-cdk/core:includePrefixInUniqueNameGeneration": true,
    "@aws-cdk/aws-efs:denyAnonymousAccess": true,
    "@aws-cdk/aws-opensearchservice:enableOpensearchMultiAzWithStandby": true,
    "@aws-cdk/aws-lambda-nodejs:useLatestRuntimeVersion": true,
    "@aws-cdk/aws-efs:mountTargetOrderInsensitiveLogicalId": true,
    "@aws-cdk/aws-rds:auroraClusterChangeScopeOfInstanceParameterGroupWithEachParameters": true,
    "@aws-cdk/aws-appsync:useArnForSourceApiAssociationIdentifier": true,
    "@aws-cdk/aws-rds:preventRenderingDeprecatedCredentials": true,
    "@aws-cdk/aws-codepipeline-actions:useNewDefaultBranchForCodeCommitSource": true,
    "@aws-cdk/aws-cloudwatch-actions:changeLambdaPermissionLogicalIdForLambdaAction": true,
    "@aws-cdk/aws-codepipeline:crossAccountKeysDefaultValueToFalse": true,
    "@aws-cdk/aws-codepipeline:defaultPipelineTypeToV2": true,
    "@aws-cdk/aws-kms:reduceCrossAccountRegionPolicyScope": true,
    "@aws-cdk/aws-eks:nodegroupNameAttribute": true,
    "@aws-cdk/aws-ec2:ebsDefaultGp3Volume": true,
    "@aws-cdk/aws-ecs:removeDefaultDeploymentAlarm": true,
    "@aws-cdk/custom-resources:logApiResponseDataPropertyTrueDefault": false
  }
}
",
  "project.json": "{
  "name": "@proj/test",
  "$schema": "../../node_modules/nx/schemas/project-schema.json",
  "sourceRoot": "packages/test/src",
  "projectType": "application",
  "tags": [],
  "metadata": {
    "generator": "ts#infra"
  },
  "targets": {
    "bootstrap": {
      "executor": "nx:run-commands",
      "options": {
        "cwd": "packages/test",
        "command": "cdk bootstrap"
      }
    },
    "build": {
      "dependsOn": ["lint", "compile", "test", "synth"]
    },
    "cdk": {
      "executor": "nx:run-commands",
      "options": {
        "cwd": "packages/test",
        "command": "cdk"
      }
    },
    "compile": {
      "executor": "nx:run-commands",
      "outputs": ["{workspaceRoot}/dist/packages/test/tsc"],
      "options": {
        "command": "tsc --build tsconfig.lib.json",
        "cwd": "{projectRoot}"
      }
    },
    "deploy": {
      "executor": "nx:run-commands",
      "options": {
        "cwd": "packages/test",
        "command": "cdk deploy --require-approval=never"
      }
    },
    "deploy-ci": {
      "executor": "nx:run-commands",
      "options": {
        "cwd": "packages/test",
        "command": "cdk deploy --require-approval=never --app ../../dist/packages/test/cdk.out"
      }
    },
    "destroy": {
      "executor": "nx:run-commands",
      "options": {
        "cwd": "packages/test",
        "command": "cdk destroy --require-approval=never"
      }
    },
    "destroy-ci": {
      "executor": "nx:run-commands",
      "options": {
        "cwd": "packages/test",
        "command": "cdk destroy --require-approval=never --app ../../dist/packages/test/cdk.out"
      }
    },
    "synth": {
      "cache": true,
      "executor": "nx:run-commands",
      "inputs": ["default"],
      "outputs": ["{workspaceRoot}/dist/packages/test/cdk.out"],
      "dependsOn": ["^build", "compile"],
      "options": {
        "cwd": "packages/test",
        "command": "cdk synth"
      }
    },
    "test": {
      "executor": "@nx/vite:test",
      "outputs": ["{options.reportsDirectory}"],
      "options": {
        "reportsDirectory": "../../coverage/packages/test"
      }
    }
  }
}
",
  "src/main.ts": "import { ApplicationStack } from './stacks/application-stack.js';
import { App, CfnGuardValidator, RuleSet } from ':proj/common-constructs';

const app = new App({
  policyValidationBeta1: [new CfnGuardValidator(RuleSet.AWS_PROTOTYPING)],
});

// Use this to deploy your own sandbox environment (assumes your CLI credentials)
new ApplicationStack(app, 'proj-infra-sandbox', {
  env: {
    account: process.env.CDK_DEFAULT_ACCOUNT,
    region: process.env.CDK_DEFAULT_REGION,
  },
  crossRegionReferences: true,
});

app.synth();
",
  "src/stacks/application-stack.ts": "import * as cdk from 'aws-cdk-lib';
import { Construct } from 'constructs';

export class ApplicationStack extends cdk.Stack {
  constructor(scope: Construct, id: string, props?: cdk.StackProps) {
    super(scope, id, props);

    // The code that defines your stack goes here
  }
}
",
}
`;

exports[`infra generator > should generate valid CDK application code > cdk-json-content 1`] = `
{
  "app": "tsx src/main.ts",
  "context": {
    "@aws-cdk-containers/ecs-service-extensions:enableDefaultLogDriver": true,
    "@aws-cdk/aws-apigateway:authorizerChangeDeploymentLogicalId": true,
    "@aws-cdk/aws-apigateway:disableCloudWatchRole": true,
    "@aws-cdk/aws-apigateway:requestValidatorUniqueId": true,
    "@aws-cdk/aws-appsync:useArnForSourceApiAssociationIdentifier": true,
    "@aws-cdk/aws-autoscaling:generateLaunchTemplateInsteadOfLaunchConfig": true,
    "@aws-cdk/aws-cloudwatch-actions:changeLambdaPermissionLogicalIdForLambdaAction": true,
    "@aws-cdk/aws-codedeploy:removeAlarmsFromDeploymentGroup": true,
    "@aws-cdk/aws-codepipeline-actions:useNewDefaultBranchForCodeCommitSource": true,
    "@aws-cdk/aws-codepipeline:crossAccountKeyAliasStackSafeResourceName": true,
    "@aws-cdk/aws-codepipeline:crossAccountKeysDefaultValueToFalse": true,
    "@aws-cdk/aws-codepipeline:defaultPipelineTypeToV2": true,
    "@aws-cdk/aws-ec2:ebsDefaultGp3Volume": true,
    "@aws-cdk/aws-ec2:launchTemplateDefaultUserData": true,
    "@aws-cdk/aws-ec2:restrictDefaultSecurityGroup": true,
    "@aws-cdk/aws-ec2:uniqueImdsv2TemplateName": true,
    "@aws-cdk/aws-ecs:arnFormatIncludesClusterName": true,
    "@aws-cdk/aws-ecs:disableExplicitDeploymentControllerForCircuitBreaker": true,
    "@aws-cdk/aws-ecs:removeDefaultDeploymentAlarm": true,
    "@aws-cdk/aws-efs:denyAnonymousAccess": true,
    "@aws-cdk/aws-efs:mountTargetOrderInsensitiveLogicalId": true,
    "@aws-cdk/aws-eks:nodegroupNameAttribute": true,
    "@aws-cdk/aws-events:eventsTargetQueueSameAccount": true,
    "@aws-cdk/aws-iam:importedRoleStackSafeDefaultPolicyName": true,
    "@aws-cdk/aws-iam:minimizePolicies": true,
    "@aws-cdk/aws-kms:aliasNameRef": true,
    "@aws-cdk/aws-kms:reduceCrossAccountRegionPolicyScope": true,
    "@aws-cdk/aws-lambda-nodejs:useLatestRuntimeVersion": true,
    "@aws-cdk/aws-lambda:recognizeLayerVersion": true,
    "@aws-cdk/aws-opensearchservice:enableOpensearchMultiAzWithStandby": true,
    "@aws-cdk/aws-rds:auroraClusterChangeScopeOfInstanceParameterGroupWithEachParameters": true,
    "@aws-cdk/aws-rds:databaseProxyUniqueResourceName": true,
    "@aws-cdk/aws-rds:preventRenderingDeprecatedCredentials": true,
    "@aws-cdk/aws-redshift:columnId": true,
    "@aws-cdk/aws-route53-patters:useCertificate": true,
    "@aws-cdk/aws-s3:createDefaultLoggingPolicy": true,
    "@aws-cdk/aws-s3:serverAccessLogsUseBucketPolicy": true,
    "@aws-cdk/aws-secretsmanager:useAttachedSecretResourcePolicyForSecretTargetAttachments": true,
    "@aws-cdk/aws-sns-subscriptions:restrictSqsDescryption": true,
    "@aws-cdk/aws-stepfunctions-tasks:enableEmrServicePolicyV2": true,
    "@aws-cdk/core:checkSecretUsage": true,
    "@aws-cdk/core:enablePartitionLiterals": true,
    "@aws-cdk/core:includePrefixInUniqueNameGeneration": true,
    "@aws-cdk/core:target-partitions": [
      "aws",
      "aws-cn",
    ],
    "@aws-cdk/core:validateSnapshotRemovalPolicy": true,
    "@aws-cdk/custom-resources:logApiResponseDataPropertyTrueDefault": false,
    "@aws-cdk/customresources:installLatestAwsSdkDefault": false,
  },
  "output": "../../dist/packages/test/cdk.out",
  "watch": {
    "exclude": [
      "README.md",
      "cdk*.json",
      "**/*.d.ts",
      "**/*.js",
      "tsconfig.json",
      "package*.json",
      "yarn.lock",
      "node_modules",
      "test",
    ],
    "include": [
      "**",
    ],
  },
}
`;

exports[`infra generator > should generate valid CDK application code > main-ts-content 1`] = `
"import { ApplicationStack } from './stacks/application-stack.js';
import { App, CfnGuardValidator, RuleSet } from ':proj/common-constructs';

const app = new App({
  policyValidationBeta1: [new CfnGuardValidator(RuleSet.AWS_PROTOTYPING)],
});

// Use this to deploy your own sandbox environment (assumes your CLI credentials)
new ApplicationStack(app, 'proj-infra-sandbox', {
  env: {
    account: process.env.CDK_DEFAULT_ACCOUNT,
    region: process.env.CDK_DEFAULT_REGION,
  },
  crossRegionReferences: true,
});

app.synth();
"
`;

exports[`infra generator > should generate valid CDK application code > stack-ts-content 1`] = `
"import * as cdk from 'aws-cdk-lib';
import { Construct } from 'constructs';

export class ApplicationStack extends cdk.Stack {
  constructor(scope: Construct, id: string, props?: cdk.StackProps) {
    super(scope, id, props);

    // The code that defines your stack goes here
  }
}
"
`;

exports[`infra generator > should handle custom project names correctly > custom-name-files 1`] = `
{
  "cdk.json": "{
  "app": "tsx src/main.ts",
  "output": "../../dist/packages/custom-infra/cdk.out",
  "watch": {
    "include": ["**"],
    "exclude": [
      "README.md",
      "cdk*.json",
      "**/*.d.ts",
      "**/*.js",
      "tsconfig.json",
      "package*.json",
      "yarn.lock",
      "node_modules",
      "test"
    ]
  },
  "context": {
    "@aws-cdk/aws-lambda:recognizeLayerVersion": true,
    "@aws-cdk/core:checkSecretUsage": true,
    "@aws-cdk/core:target-partitions": ["aws", "aws-cn"],
    "@aws-cdk-containers/ecs-service-extensions:enableDefaultLogDriver": true,
    "@aws-cdk/aws-ec2:uniqueImdsv2TemplateName": true,
    "@aws-cdk/aws-ecs:arnFormatIncludesClusterName": true,
    "@aws-cdk/aws-iam:minimizePolicies": true,
    "@aws-cdk/core:validateSnapshotRemovalPolicy": true,
    "@aws-cdk/aws-codepipeline:crossAccountKeyAliasStackSafeResourceName": true,
    "@aws-cdk/aws-s3:createDefaultLoggingPolicy": true,
    "@aws-cdk/aws-sns-subscriptions:restrictSqsDescryption": true,
    "@aws-cdk/aws-apigateway:disableCloudWatchRole": true,
    "@aws-cdk/core:enablePartitionLiterals": true,
    "@aws-cdk/aws-events:eventsTargetQueueSameAccount": true,
    "@aws-cdk/aws-ecs:disableExplicitDeploymentControllerForCircuitBreaker": true,
    "@aws-cdk/aws-iam:importedRoleStackSafeDefaultPolicyName": true,
    "@aws-cdk/aws-s3:serverAccessLogsUseBucketPolicy": true,
    "@aws-cdk/aws-route53-patters:useCertificate": true,
    "@aws-cdk/customresources:installLatestAwsSdkDefault": false,
    "@aws-cdk/aws-rds:databaseProxyUniqueResourceName": true,
    "@aws-cdk/aws-codedeploy:removeAlarmsFromDeploymentGroup": true,
    "@aws-cdk/aws-apigateway:authorizerChangeDeploymentLogicalId": true,
    "@aws-cdk/aws-ec2:launchTemplateDefaultUserData": true,
    "@aws-cdk/aws-secretsmanager:useAttachedSecretResourcePolicyForSecretTargetAttachments": true,
    "@aws-cdk/aws-redshift:columnId": true,
    "@aws-cdk/aws-stepfunctions-tasks:enableEmrServicePolicyV2": true,
    "@aws-cdk/aws-ec2:restrictDefaultSecurityGroup": true,
    "@aws-cdk/aws-apigateway:requestValidatorUniqueId": true,
    "@aws-cdk/aws-kms:aliasNameRef": true,
    "@aws-cdk/aws-autoscaling:generateLaunchTemplateInsteadOfLaunchConfig": true,
    "@aws-cdk/core:includePrefixInUniqueNameGeneration": true,
    "@aws-cdk/aws-efs:denyAnonymousAccess": true,
    "@aws-cdk/aws-opensearchservice:enableOpensearchMultiAzWithStandby": true,
    "@aws-cdk/aws-lambda-nodejs:useLatestRuntimeVersion": true,
    "@aws-cdk/aws-efs:mountTargetOrderInsensitiveLogicalId": true,
    "@aws-cdk/aws-rds:auroraClusterChangeScopeOfInstanceParameterGroupWithEachParameters": true,
    "@aws-cdk/aws-appsync:useArnForSourceApiAssociationIdentifier": true,
    "@aws-cdk/aws-rds:preventRenderingDeprecatedCredentials": true,
    "@aws-cdk/aws-codepipeline-actions:useNewDefaultBranchForCodeCommitSource": true,
    "@aws-cdk/aws-cloudwatch-actions:changeLambdaPermissionLogicalIdForLambdaAction": true,
    "@aws-cdk/aws-codepipeline:crossAccountKeysDefaultValueToFalse": true,
    "@aws-cdk/aws-codepipeline:defaultPipelineTypeToV2": true,
    "@aws-cdk/aws-kms:reduceCrossAccountRegionPolicyScope": true,
    "@aws-cdk/aws-eks:nodegroupNameAttribute": true,
    "@aws-cdk/aws-ec2:ebsDefaultGp3Volume": true,
    "@aws-cdk/aws-ecs:removeDefaultDeploymentAlarm": true,
    "@aws-cdk/custom-resources:logApiResponseDataPropertyTrueDefault": false
  }
}
",
  "src/main.ts": "import { ApplicationStack } from './stacks/application-stack.js';
import { App, CfnGuardValidator, RuleSet } from ':proj/common-constructs';

const app = new App({
  policyValidationBeta1: [new CfnGuardValidator(RuleSet.AWS_PROTOTYPING)],
});

// Use this to deploy your own sandbox environment (assumes your CLI credentials)
new ApplicationStack(app, 'proj-infra-sandbox', {
  env: {
    account: process.env.CDK_DEFAULT_ACCOUNT,
    region: process.env.CDK_DEFAULT_REGION,
  },
  crossRegionReferences: true,
});

app.synth();
",
  "src/stacks/application-stack.ts": "import * as cdk from 'aws-cdk-lib';
import { Construct } from 'constructs';

export class ApplicationStack extends cdk.Stack {
  constructor(scope: Construct, id: string, props?: cdk.StackProps) {
    super(scope, id, props);

    // The code that defines your stack goes here
  }
}
",
}
`;

exports[`infra generator > should handle custom project names correctly > custom-name-project-config 1`] = `
{
  "$schema": "../../node_modules/nx/schemas/project-schema.json",
  "metadata": {
    "generator": "ts#infra",
  },
  "name": "@proj/custom-infra",
  "projectType": "application",
  "root": "packages/custom-infra",
  "sourceRoot": "packages/custom-infra/src",
  "tags": [],
  "targets": {
    "bootstrap": {
      "executor": "nx:run-commands",
      "options": {
        "command": "cdk bootstrap",
        "cwd": "packages/custom-infra",
      },
    },
    "build": {
      "dependsOn": [
        "lint",
        "compile",
        "test",
        "synth",
      ],
    },
    "cdk": {
      "executor": "nx:run-commands",
      "options": {
        "command": "cdk",
        "cwd": "packages/custom-infra",
      },
    },
    "compile": {
      "executor": "nx:run-commands",
      "options": {
        "command": "tsc --build tsconfig.lib.json",
        "cwd": "{projectRoot}",
      },
      "outputs": [
        "{workspaceRoot}/dist/packages/custom-infra/tsc",
      ],
    },
    "deploy": {
      "executor": "nx:run-commands",
      "options": {
        "command": "cdk deploy --require-approval=never",
        "cwd": "packages/custom-infra",
      },
    },
    "deploy-ci": {
      "executor": "nx:run-commands",
      "options": {
        "command": "cdk deploy --require-approval=never --app ../../dist/packages/custom-infra/cdk.out",
        "cwd": "packages/custom-infra",
      },
    },
    "destroy": {
      "executor": "nx:run-commands",
      "options": {
        "command": "cdk destroy --require-approval=never",
        "cwd": "packages/custom-infra",
      },
    },
    "destroy-ci": {
      "executor": "nx:run-commands",
      "options": {
        "command": "cdk destroy --require-approval=never --app ../../dist/packages/custom-infra/cdk.out",
        "cwd": "packages/custom-infra",
      },
    },
    "synth": {
      "cache": true,
      "dependsOn": [
        "^build",
        "compile",
      ],
      "executor": "nx:run-commands",
      "inputs": [
        "default",
      ],
      "options": {
        "command": "cdk synth",
        "cwd": "packages/custom-infra",
      },
      "outputs": [
        "{workspaceRoot}/dist/packages/custom-infra/cdk.out",
      ],
    },
    "test": {
      "executor": "@nx/vite:test",
      "options": {
        "reportsDirectory": "../../coverage/packages/custom-infra",
      },
      "outputs": [
        "{options.reportsDirectory}",
      ],
    },
  },
}
`;

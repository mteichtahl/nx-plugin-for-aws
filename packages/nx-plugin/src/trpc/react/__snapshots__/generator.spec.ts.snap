// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`trpc react generator > should generate trpc react files > TestApiClientProvider.tsx 1`] = `
"import { AppRouter } from 'backend';
import { useQueryClient } from '@tanstack/react-query';
import { createTRPCContext } from '@trpc/tanstack-react-query';
import { FC, PropsWithChildren, useMemo } from 'react';
import { useRuntimeConfig } from '../hooks/useRuntimeConfig';
import { HTTPLinkOptions, createTRPCClient, httpLink } from '@trpc/client';

const { TRPCProvider, useTRPC } = createTRPCContext<AppRouter>();

export const useTestApi = useTRPC;

export const TestApiClientProvider: FC<PropsWithChildren> = ({ children }) => {
  const queryClient = useQueryClient();
  const runtimeConfig = useRuntimeConfig();
  const apiUrl = runtimeConfig.apis.TestApi;

  const trpcClient = useMemo(() => {
    const linkOptions: HTTPLinkOptions<any> = {
      url: apiUrl,
    };

    return createTRPCClient<AppRouter>({
      links: [httpLink(linkOptions)],
    });
  }, [apiUrl]);

  return (
    <TRPCProvider trpcClient={trpcClient} queryClient={queryClient}>
      {children}
    </TRPCProvider>
  );
};

export default TestApiClientProvider;
"
`;

exports[`trpc react generator > should generate trpc react files > useTestApi.tsx 1`] = `
"import { useTestApi as useClient } from '../components/TestApiClientProvider';

export const useTestApi = useClient;
"
`;

exports[`trpc react generator > should handle Cognito auth option > TestApiClientProvider-Cognito.tsx 1`] = `
"import { AppRouter } from 'backend';
import { useQueryClient } from '@tanstack/react-query';
import { createTRPCContext } from '@trpc/tanstack-react-query';
import { FC, PropsWithChildren, useMemo } from 'react';
import { useRuntimeConfig } from '../hooks/useRuntimeConfig';
import { HTTPLinkOptions, createTRPCClient, httpLink } from '@trpc/client';
import { useAuth } from 'react-oidc-context';

const { TRPCProvider, useTRPC } = createTRPCContext<AppRouter>();

export const useTestApi = useTRPC;

export const TestApiClientProvider: FC<PropsWithChildren> = ({ children }) => {
  const queryClient = useQueryClient();
  const runtimeConfig = useRuntimeConfig();
  const apiUrl = runtimeConfig.apis.TestApi;

  const { user } = useAuth();

  const trpcClient = useMemo(() => {
    const linkOptions: HTTPLinkOptions<any> = {
      url: apiUrl,
      headers: {
        Authorization: \`Bearer \${user?.id_token}\`,
      },
    };

    return createTRPCClient<AppRouter>({
      links: [httpLink(linkOptions)],
    });
  }, [apiUrl, user]);

  return (
    <TRPCProvider trpcClient={trpcClient} queryClient={queryClient}>
      {children}
    </TRPCProvider>
  );
};

export default TestApiClientProvider;
"
`;

exports[`trpc react generator > should handle IAM auth option > TestApiClientProvider-IAM.tsx 1`] = `
"import { AppRouter } from 'backend';
import { useQueryClient } from '@tanstack/react-query';
import { createTRPCContext } from '@trpc/tanstack-react-query';
import { FC, PropsWithChildren, useMemo } from 'react';
import { useRuntimeConfig } from '../hooks/useRuntimeConfig';
import { HTTPLinkOptions, createTRPCClient, httpLink } from '@trpc/client';
import { useSigV4 } from '../hooks/useSigV4';

const { TRPCProvider, useTRPC } = createTRPCContext<AppRouter>();

export const useTestApi = useTRPC;

export const TestApiClientProvider: FC<PropsWithChildren> = ({ children }) => {
  const queryClient = useQueryClient();
  const runtimeConfig = useRuntimeConfig();
  const apiUrl = runtimeConfig.apis.TestApi;

  const sigv4Client = useSigV4();

  const trpcClient = useMemo(() => {
    const linkOptions: HTTPLinkOptions<any> = {
      url: apiUrl,
      fetch: sigv4Client,
    };

    return createTRPCClient<AppRouter>({
      links: [httpLink(linkOptions)],
    });
  }, [apiUrl, sigv4Client]);

  return (
    <TRPCProvider trpcClient={trpcClient} queryClient={queryClient}>
      {children}
    </TRPCProvider>
  );
};

export default TestApiClientProvider;
"
`;

exports[`trpc react generator > should handle IAM auth option > useSigV4.tsx 1`] = `
"import { AwsClient } from 'aws4fetch';
import { CognitoIdentityClient } from '@aws-sdk/client-cognito-identity';
import { fromCognitoIdentityPool } from '@aws-sdk/credential-provider-cognito-identity';
import { useCallback, useState } from 'react';
import { useAuth } from 'react-oidc-context';
import { useRuntimeConfig } from './useRuntimeConfig';
import {
  AwsCredentialIdentity,
  AwsCredentialIdentityProvider,
} from '@smithy/types';

// Credential expiration grace time before considering credentials as expired
const CREDENTIAL_EXPIRY_OFFSET_MILLIS = 30 * 1000;

export const useSigV4 = () => {
  const { cognitoProps } = useRuntimeConfig();
  const { user } = useAuth();

  const [cachedCredentials, setCachedCredentials] = useState<{
    [key: string]: AwsCredentialIdentity;
  }>({});

  const withCachedCredentials = useCallback(
    async (
      provider: AwsCredentialIdentityProvider,
      ...cacheKeys: string[]
    ): Promise<AwsCredentialIdentity> => {
      const key = \`sigv4/\${cacheKeys.join('/')}\`;
      const cachedCreds = cachedCredentials[key];
      if (
        cachedCreds &&
        cachedCreds.expiration &&
        cachedCreds.expiration.getTime() >
          Date.now() + CREDENTIAL_EXPIRY_OFFSET_MILLIS
      ) {
        return cachedCreds;
      }
      const credentials = await provider();
      setCachedCredentials((prev) => ({ ...prev, [key]: credentials }));
      return credentials;
    },
    [cachedCredentials, setCachedCredentials],
  );

  return useCallback(
    async (input: RequestInfo | URL, init?: RequestInit | undefined) => {
      if (!cognitoProps && import.meta.env.MODE === 'serve-local') {
        // Skip request signing in serve-local mode when cognitoProps are not set
        return fetch(input, init);
      }
      if (!cognitoProps) {
        throw new Error('cognitoProps is undefined!');
      }
      if (!user?.id_token) {
        throw new Error('user.id_token is undefined!');
      }

      const credentialsFromCognitoIdentityPool = fromCognitoIdentityPool({
        client: new CognitoIdentityClient({ region: cognitoProps.region }),
        identityPoolId: cognitoProps.identityPoolId,
        logins: {
          [\`cognito-idp.\${cognitoProps.region}.amazonaws.com/\${cognitoProps.userPoolId}\`]:
            user.id_token,
        },
      });
      const cognitoidentity = new CognitoIdentityClient({
        credentials: credentialsFromCognitoIdentityPool,
      });
      const credential = await withCachedCredentials(
        cognitoidentity.config.credentials,
        cognitoProps.identityPoolId,
        user.profile.sub,
      );
      const awsClient = new AwsClient(credential);
      return awsClient.fetch(input, init);
    },
    [cognitoProps, user?.id_token, user?.profile.sub, withCachedCredentials],
  );
};
"
`;

exports[`trpc react generator > should modify main.tsx correctly > main.tsx 1`] = `
"import TestApiClientProvider from './components/TestApiClientProvider';
import QueryClientProvider from './components/QueryClientProvider';
import RuntimeConfigProvider from './components/RuntimeConfig';
import { RouterProvider } from '@tanstack/react-router';

const App = () => <RouterProvider router={router} />;

export function Main() {
  return (
    <RuntimeConfigProvider>
      <QueryClientProvider>
        <TestApiClientProvider>
          <App />
        </TestApiClientProvider>
      </QueryClientProvider>
    </RuntimeConfigProvider>
  );
}
"
`;
